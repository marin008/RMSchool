@function is-map($var){
//  @error type-of($var);
  @return type-of($var) != 'number';
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

// Function for converting a px based font-size to rem.
@function px2rem($size) {
  @return (strip-unit($size) / strip-unit($font-size)) * 1rem;
}

/*
example:

.overlay {
  z-index: z(overlay);
}
.overlay {
  z-index: z(modal) - 1;
}

$z-layers: (
  'modal':            5000,
  'overlay':          4999,
  'dropdown':         4000,
  'default':             1,
  'bottomless-pit': -10000
);
 */

@function z($key) {
  @if map-has-key($z-layers, $key) {
    @return map-get($z-layers, $key);
  }
  @warn "Unknown `#{$key}` in $z-layers.";
  @return null;
}


/*
example:

.element {
  background-color: color(sky); // #09A6E4
}
 */
@function color($key) {
  @if map-has-key($colors, $key) {
    @return map-get($colors, $key);
  }
  @warn "Unknown `#{$key}` in $colors.";
  @return null;
}

@function fontF($key) {
  @if map-has-key($fontFamily, $key) {
    @return map-get($fontFamily, $key);
  }
  @warn "Unknown `#{$key}` in $font-family.";
  @return null;	
}

@function fontS($key, $subkey: '') {
  @if map-has-key($fontSize, $key) {
    @if $subkey != '' {
      $fontSizes: map-get($fontSize, $key);
      @if map-has-key($fontSizes, $subkey) {
        @return map-get($fontSizes, $subkey) * 1px;
      } @else {
        @warn "Unknown `#{$subkey}` in $font-size.";
        @return null;      
      }
    } @else {
      @return map-get($fontSize, $key);
    }
  }
  @warn "Unknown `#{$key}` in $font-size.";
  @return null;	
}

